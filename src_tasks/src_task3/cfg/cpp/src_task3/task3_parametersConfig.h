//#line 2 "/opt/ros/indigo/share/dynamic_reconfigure/templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the src_task3 package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __src_task3__TASK3_PARAMETERSCONFIG_H__
#define __src_task3__TASK3_PARAMETERSCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace src_task3
{
  class task3_parametersConfigStatics;
  
  class task3_parametersConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(task3_parametersConfig &config, const task3_parametersConfig &max, const task3_parametersConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const task3_parametersConfig &config1, const task3_parametersConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, task3_parametersConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const task3_parametersConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, task3_parametersConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const task3_parametersConfig &config) const = 0;
      virtual void getValue(const task3_parametersConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, 
          std::string a_description, std::string a_edit_method, T task3_parametersConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (task3_parametersConfig::* field);

      virtual void clamp(task3_parametersConfig &config, const task3_parametersConfig &max, const task3_parametersConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const task3_parametersConfig &config1, const task3_parametersConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, task3_parametersConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const task3_parametersConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, task3_parametersConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const task3_parametersConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const task3_parametersConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, task3_parametersConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, task3_parametersConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<task3_parametersConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(task3_parametersConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class STAIRWALKPOSE
{
  public:
    STAIRWALKPOSE()
    {
      state = true;
      name = "stairWalkPose";
    }

    void setParams(task3_parametersConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("x_sw"==(*_i)->name){x_sw = boost::any_cast<double>(val);}
        if("y_sw"==(*_i)->name){y_sw = boost::any_cast<double>(val);}
        if("theta_sw"==(*_i)->name){theta_sw = boost::any_cast<double>(val);}
      }
    }

    double x_sw;
double y_sw;
double theta_sw;

    bool state;
    std::string name;

    
}stairwalkpose;

class HANDLECENTER
{
  public:
    HANDLECENTER()
    {
      state = true;
      name = "handleCenter";
    }

    void setParams(task3_parametersConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("x_hc"==(*_i)->name){x_hc = boost::any_cast<double>(val);}
        if("y_hc"==(*_i)->name){y_hc = boost::any_cast<double>(val);}
        if("z_hc"==(*_i)->name){z_hc = boost::any_cast<double>(val);}
      }
    }

    double x_hc;
double y_hc;
double z_hc;

    bool state;
    std::string name;

    
}handlecenter;

class TABLEWALKPOSE
{
  public:
    TABLEWALKPOSE()
    {
      state = true;
      name = "tableWalkPose";
    }

    void setParams(task3_parametersConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("x_tw"==(*_i)->name){x_tw = boost::any_cast<double>(val);}
        if("y_tw"==(*_i)->name){y_tw = boost::any_cast<double>(val);}
        if("theta_tw"==(*_i)->name){theta_tw = boost::any_cast<double>(val);}
      }
    }

    double x_tw;
double y_tw;
double theta_tw;

    bool state;
    std::string name;

    
}tablewalkpose;

class LEAKDETECTORLOC
{
  public:
    LEAKDETECTORLOC()
    {
      state = true;
      name = "leakDetectorLoc";
    }

    void setParams(task3_parametersConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("x_ld"==(*_i)->name){x_ld = boost::any_cast<double>(val);}
        if("y_ld"==(*_i)->name){y_ld = boost::any_cast<double>(val);}
        if("z_ld"==(*_i)->name){z_ld = boost::any_cast<double>(val);}
      }
    }

    double x_ld;
double y_ld;
double z_ld;

    bool state;
    std::string name;

    
}leakdetectorloc;

class LEAKWALLPOSE
{
  public:
    LEAKWALLPOSE()
    {
      state = true;
      name = "leakWallPose";
    }

    void setParams(task3_parametersConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("x_lw"==(*_i)->name){x_lw = boost::any_cast<double>(val);}
        if("y_lw"==(*_i)->name){y_lw = boost::any_cast<double>(val);}
        if("theta_lw"==(*_i)->name){theta_lw = boost::any_cast<double>(val);}
      }
    }

    double x_lw;
double y_lw;
double theta_lw;

    bool state;
    std::string name;

    
}leakwallpose;

class LEAKLOC
{
  public:
    LEAKLOC()
    {
      state = true;
      name = "leakLoc";
    }

    void setParams(task3_parametersConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("x_l"==(*_i)->name){x_l = boost::any_cast<double>(val);}
        if("y_l"==(*_i)->name){y_l = boost::any_cast<double>(val);}
        if("z_l"==(*_i)->name){z_l = boost::any_cast<double>(val);}
      }
    }

    double x_l;
double y_l;
double z_l;

    bool state;
    std::string name;

    
}leakloc;

class REPAIRTOOLLOC
{
  public:
    REPAIRTOOLLOC()
    {
      state = true;
      name = "repairToolLoc";
    }

    void setParams(task3_parametersConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("x_rt"==(*_i)->name){x_rt = boost::any_cast<double>(val);}
        if("y_rt"==(*_i)->name){y_rt = boost::any_cast<double>(val);}
        if("z_rt"==(*_i)->name){z_rt = boost::any_cast<double>(val);}
      }
    }

    double x_rt;
double y_rt;
double z_rt;

    bool state;
    std::string name;

    
}repairtoolloc;

class FINISHBOXWALKPOSE
{
  public:
    FINISHBOXWALKPOSE()
    {
      state = true;
      name = "finishBoxWalkPose";
    }

    void setParams(task3_parametersConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("x_fb"==(*_i)->name){x_fb = boost::any_cast<double>(val);}
        if("y_fb"==(*_i)->name){y_fb = boost::any_cast<double>(val);}
        if("theta_fb"==(*_i)->name){theta_fb = boost::any_cast<double>(val);}
      }
    }

    double x_fb;
double y_fb;
double theta_fb;

    bool state;
    std::string name;

    
}finishboxwalkpose;

}groups;



//#line 14 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double x_sw;
//#line 15 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double y_sw;
//#line 16 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double theta_sw;
//#line 20 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double x_hc;
//#line 21 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double y_hc;
//#line 22 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double z_hc;
//#line 26 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double x_tw;
//#line 27 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double y_tw;
//#line 28 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double theta_tw;
//#line 32 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double x_ld;
//#line 33 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double y_ld;
//#line 34 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double z_ld;
//#line 38 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double x_lw;
//#line 39 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double y_lw;
//#line 40 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double theta_lw;
//#line 45 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double x_l;
//#line 46 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double y_l;
//#line 47 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double z_l;
//#line 51 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double x_rt;
//#line 52 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double y_rt;
//#line 53 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double z_rt;
//#line 57 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double x_fb;
//#line 58 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double y_fb;
//#line 59 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      double theta_fb;
//#line 218 "/opt/ros/indigo/share/dynamic_reconfigure/templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("task3_parametersConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const task3_parametersConfig &__max__ = __getMax__();
      const task3_parametersConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const task3_parametersConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const task3_parametersConfig &__getDefault__();
    static const task3_parametersConfig &__getMax__();
    static const task3_parametersConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const task3_parametersConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void task3_parametersConfig::ParamDescription<std::string>::clamp(task3_parametersConfig &config, const task3_parametersConfig &max, const task3_parametersConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class task3_parametersConfigStatics
  {
    friend class task3_parametersConfig;
    
    task3_parametersConfigStatics()
    {
task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT, task3_parametersConfig> Default("Default", "", 0, 0, true, &task3_parametersConfig::groups);
task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::STAIRWALKPOSE, task3_parametersConfig::DEFAULT> stairWalkPose("stairWalkPose", "", 0, 1, true, &task3_parametersConfig::DEFAULT::stairwalkpose);
//#line 14 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.x_sw = 0.0;
//#line 14 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.x_sw = 10.0;
//#line 14 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.x_sw = 2.828;
//#line 14 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      stairWalkPose.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_sw", "double", 0, "x of goal location", "", &task3_parametersConfig::x_sw)));
//#line 14 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_sw", "double", 0, "x of goal location", "", &task3_parametersConfig::x_sw)));
//#line 15 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.y_sw = -1.0;
//#line 15 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.y_sw = 1.0;
//#line 15 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.y_sw = 0.292;
//#line 15 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      stairWalkPose.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_sw", "double", 0, "y of goal location", "", &task3_parametersConfig::y_sw)));
//#line 15 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_sw", "double", 0, "y of goal location", "", &task3_parametersConfig::y_sw)));
//#line 16 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.theta_sw = -1.57;
//#line 16 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.theta_sw = 1.57;
//#line 16 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.theta_sw = 0.82;
//#line 16 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      stairWalkPose.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("theta_sw", "double", 0, "theta of goal location", "", &task3_parametersConfig::theta_sw)));
//#line 16 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("theta_sw", "double", 0, "theta of goal location", "", &task3_parametersConfig::theta_sw)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      stairWalkPose.convertParams();
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.groups.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::STAIRWALKPOSE, task3_parametersConfig::DEFAULT>(stairWalkPose)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::STAIRWALKPOSE, task3_parametersConfig::DEFAULT>(stairWalkPose)));
task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::HANDLECENTER, task3_parametersConfig::DEFAULT> handleCenter("handleCenter", "", 0, 2, true, &task3_parametersConfig::DEFAULT::handlecenter);
//#line 20 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.x_hc = 0.0;
//#line 20 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.x_hc = 10.0;
//#line 20 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.x_hc = 2.828;
//#line 20 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      handleCenter.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_hc", "double", 0, "x of door handle", "", &task3_parametersConfig::x_hc)));
//#line 20 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_hc", "double", 0, "x of door handle", "", &task3_parametersConfig::x_hc)));
//#line 21 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.y_hc = -1.0;
//#line 21 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.y_hc = 1.0;
//#line 21 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.y_hc = 0.292;
//#line 21 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      handleCenter.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_hc", "double", 0, "y of door handle", "", &task3_parametersConfig::y_hc)));
//#line 21 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_hc", "double", 0, "y of door handle", "", &task3_parametersConfig::y_hc)));
//#line 22 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.z_hc = -1.57;
//#line 22 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.z_hc = 1.57;
//#line 22 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.z_hc = 0.82;
//#line 22 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      handleCenter.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("z_hc", "double", 0, "z of door handle", "", &task3_parametersConfig::z_hc)));
//#line 22 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("z_hc", "double", 0, "z of door handle", "", &task3_parametersConfig::z_hc)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      handleCenter.convertParams();
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.groups.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::HANDLECENTER, task3_parametersConfig::DEFAULT>(handleCenter)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::HANDLECENTER, task3_parametersConfig::DEFAULT>(handleCenter)));
task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::TABLEWALKPOSE, task3_parametersConfig::DEFAULT> tableWalkPose("tableWalkPose", "", 0, 3, true, &task3_parametersConfig::DEFAULT::tablewalkpose);
//#line 26 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.x_tw = 0.0;
//#line 26 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.x_tw = 10.0;
//#line 26 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.x_tw = 2.828;
//#line 26 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      tableWalkPose.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_tw", "double", 0, "x of goal location", "", &task3_parametersConfig::x_tw)));
//#line 26 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_tw", "double", 0, "x of goal location", "", &task3_parametersConfig::x_tw)));
//#line 27 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.y_tw = -1.0;
//#line 27 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.y_tw = 1.0;
//#line 27 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.y_tw = 0.292;
//#line 27 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      tableWalkPose.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_tw", "double", 0, "y of goal location", "", &task3_parametersConfig::y_tw)));
//#line 27 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_tw", "double", 0, "y of goal location", "", &task3_parametersConfig::y_tw)));
//#line 28 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.theta_tw = -1.57;
//#line 28 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.theta_tw = 1.57;
//#line 28 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.theta_tw = 0.82;
//#line 28 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      tableWalkPose.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("theta_tw", "double", 0, "theta of goal location", "", &task3_parametersConfig::theta_tw)));
//#line 28 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("theta_tw", "double", 0, "theta of goal location", "", &task3_parametersConfig::theta_tw)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      tableWalkPose.convertParams();
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.groups.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::TABLEWALKPOSE, task3_parametersConfig::DEFAULT>(tableWalkPose)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::TABLEWALKPOSE, task3_parametersConfig::DEFAULT>(tableWalkPose)));
task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::LEAKDETECTORLOC, task3_parametersConfig::DEFAULT> leakDetectorLoc("leakDetectorLoc", "", 0, 4, true, &task3_parametersConfig::DEFAULT::leakdetectorloc);
//#line 32 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.x_ld = 0.0;
//#line 32 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.x_ld = 10.0;
//#line 32 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.x_ld = 2.828;
//#line 32 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      leakDetectorLoc.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_ld", "double", 0, "x of leak detector", "", &task3_parametersConfig::x_ld)));
//#line 32 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_ld", "double", 0, "x of leak detector", "", &task3_parametersConfig::x_ld)));
//#line 33 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.y_ld = -1.0;
//#line 33 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.y_ld = 1.0;
//#line 33 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.y_ld = 0.292;
//#line 33 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      leakDetectorLoc.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_ld", "double", 0, "y of leak detector", "", &task3_parametersConfig::y_ld)));
//#line 33 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_ld", "double", 0, "y of leak detector", "", &task3_parametersConfig::y_ld)));
//#line 34 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.z_ld = -1.57;
//#line 34 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.z_ld = 1.57;
//#line 34 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.z_ld = 0.82;
//#line 34 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      leakDetectorLoc.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("z_ld", "double", 0, "z of leak detector", "", &task3_parametersConfig::z_ld)));
//#line 34 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("z_ld", "double", 0, "z of leak detector", "", &task3_parametersConfig::z_ld)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      leakDetectorLoc.convertParams();
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.groups.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::LEAKDETECTORLOC, task3_parametersConfig::DEFAULT>(leakDetectorLoc)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::LEAKDETECTORLOC, task3_parametersConfig::DEFAULT>(leakDetectorLoc)));
task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::LEAKWALLPOSE, task3_parametersConfig::DEFAULT> leakWallPose("leakWallPose", "", 0, 5, true, &task3_parametersConfig::DEFAULT::leakwallpose);
//#line 38 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.x_lw = 0.0;
//#line 38 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.x_lw = 10.0;
//#line 38 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.x_lw = 2.828;
//#line 38 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      leakWallPose.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_lw", "double", 0, "x of goal location", "", &task3_parametersConfig::x_lw)));
//#line 38 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_lw", "double", 0, "x of goal location", "", &task3_parametersConfig::x_lw)));
//#line 39 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.y_lw = -1.0;
//#line 39 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.y_lw = 1.0;
//#line 39 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.y_lw = 0.292;
//#line 39 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      leakWallPose.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_lw", "double", 0, "y of goal location", "", &task3_parametersConfig::y_lw)));
//#line 39 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_lw", "double", 0, "y of goal location", "", &task3_parametersConfig::y_lw)));
//#line 40 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.theta_lw = -1.57;
//#line 40 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.theta_lw = 1.57;
//#line 40 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.theta_lw = 0.82;
//#line 40 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      leakWallPose.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("theta_lw", "double", 0, "theta of goal location", "", &task3_parametersConfig::theta_lw)));
//#line 40 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("theta_lw", "double", 0, "theta of goal location", "", &task3_parametersConfig::theta_lw)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      leakWallPose.convertParams();
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.groups.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::LEAKWALLPOSE, task3_parametersConfig::DEFAULT>(leakWallPose)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::LEAKWALLPOSE, task3_parametersConfig::DEFAULT>(leakWallPose)));
task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::LEAKLOC, task3_parametersConfig::DEFAULT> leakLoc("leakLoc", "", 0, 6, true, &task3_parametersConfig::DEFAULT::leakloc);
//#line 45 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.x_l = 0.0;
//#line 45 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.x_l = 10.0;
//#line 45 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.x_l = 2.828;
//#line 45 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      leakLoc.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_l", "double", 0, "x of leak", "", &task3_parametersConfig::x_l)));
//#line 45 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_l", "double", 0, "x of leak", "", &task3_parametersConfig::x_l)));
//#line 46 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.y_l = -1.0;
//#line 46 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.y_l = 1.0;
//#line 46 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.y_l = 0.292;
//#line 46 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      leakLoc.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_l", "double", 0, "y of leak", "", &task3_parametersConfig::y_l)));
//#line 46 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_l", "double", 0, "y of leak", "", &task3_parametersConfig::y_l)));
//#line 47 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.z_l = -1.57;
//#line 47 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.z_l = 1.57;
//#line 47 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.z_l = 0.82;
//#line 47 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      leakLoc.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("z_l", "double", 0, "z of leak", "", &task3_parametersConfig::z_l)));
//#line 47 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("z_l", "double", 0, "z of leak", "", &task3_parametersConfig::z_l)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      leakLoc.convertParams();
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.groups.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::LEAKLOC, task3_parametersConfig::DEFAULT>(leakLoc)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::LEAKLOC, task3_parametersConfig::DEFAULT>(leakLoc)));
task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::REPAIRTOOLLOC, task3_parametersConfig::DEFAULT> repairToolLoc("repairToolLoc", "", 0, 7, true, &task3_parametersConfig::DEFAULT::repairtoolloc);
//#line 51 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.x_rt = 0.0;
//#line 51 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.x_rt = 10.0;
//#line 51 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.x_rt = 2.828;
//#line 51 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      repairToolLoc.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_rt", "double", 0, "x of repair tool", "", &task3_parametersConfig::x_rt)));
//#line 51 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_rt", "double", 0, "x of repair tool", "", &task3_parametersConfig::x_rt)));
//#line 52 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.y_rt = -1.0;
//#line 52 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.y_rt = 1.0;
//#line 52 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.y_rt = 0.292;
//#line 52 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      repairToolLoc.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_rt", "double", 0, "y of repair tool", "", &task3_parametersConfig::y_rt)));
//#line 52 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_rt", "double", 0, "y of repair tool", "", &task3_parametersConfig::y_rt)));
//#line 53 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.z_rt = -1.57;
//#line 53 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.z_rt = 1.57;
//#line 53 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.z_rt = 0.82;
//#line 53 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      repairToolLoc.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("z_rt", "double", 0, "z of repair tool", "", &task3_parametersConfig::z_rt)));
//#line 53 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("z_rt", "double", 0, "z of repair tool", "", &task3_parametersConfig::z_rt)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      repairToolLoc.convertParams();
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.groups.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::REPAIRTOOLLOC, task3_parametersConfig::DEFAULT>(repairToolLoc)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::REPAIRTOOLLOC, task3_parametersConfig::DEFAULT>(repairToolLoc)));
task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::FINISHBOXWALKPOSE, task3_parametersConfig::DEFAULT> finishBoxWalkPose("finishBoxWalkPose", "", 0, 8, true, &task3_parametersConfig::DEFAULT::finishboxwalkpose);
//#line 57 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.x_fb = 0.0;
//#line 57 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.x_fb = 10.0;
//#line 57 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.x_fb = 2.828;
//#line 57 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      finishBoxWalkPose.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_fb", "double", 0, "x of goal location", "", &task3_parametersConfig::x_fb)));
//#line 57 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("x_fb", "double", 0, "x of goal location", "", &task3_parametersConfig::x_fb)));
//#line 58 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.y_fb = -1.0;
//#line 58 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.y_fb = 1.0;
//#line 58 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.y_fb = 0.292;
//#line 58 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      finishBoxWalkPose.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_fb", "double", 0, "y of goal location", "", &task3_parametersConfig::y_fb)));
//#line 58 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("y_fb", "double", 0, "y of goal location", "", &task3_parametersConfig::y_fb)));
//#line 59 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __min__.theta_fb = -1.57;
//#line 59 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __max__.theta_fb = 1.57;
//#line 59 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __default__.theta_fb = 0.82;
//#line 59 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      finishBoxWalkPose.abstract_parameters.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("theta_fb", "double", 0, "theta of goal location", "", &task3_parametersConfig::theta_fb)));
//#line 59 "/home/ninja/indigo_ws/src/space_robotics_challenge/src_tasks/src_task3/cfg/task3_parameters.cfg"
      __param_descriptions__.push_back(task3_parametersConfig::AbstractParamDescriptionConstPtr(new task3_parametersConfig::ParamDescription<double>("theta_fb", "double", 0, "theta of goal location", "", &task3_parametersConfig::theta_fb)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      finishBoxWalkPose.convertParams();
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.groups.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::FINISHBOXWALKPOSE, task3_parametersConfig::DEFAULT>(finishBoxWalkPose)));
//#line 121 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT::FINISHBOXWALKPOSE, task3_parametersConfig::DEFAULT>(finishBoxWalkPose)));
//#line 245 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.convertParams();
//#line 245 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(task3_parametersConfig::AbstractGroupDescriptionConstPtr(new task3_parametersConfig::GroupDescription<task3_parametersConfig::DEFAULT, task3_parametersConfig>(Default)));
//#line 356 "/opt/ros/indigo/share/dynamic_reconfigure/templates/ConfigType.h.template"

      for (std::vector<task3_parametersConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<task3_parametersConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<task3_parametersConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    task3_parametersConfig __max__;
    task3_parametersConfig __min__;
    task3_parametersConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const task3_parametersConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static task3_parametersConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &task3_parametersConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const task3_parametersConfig &task3_parametersConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const task3_parametersConfig &task3_parametersConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const task3_parametersConfig &task3_parametersConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<task3_parametersConfig::AbstractParamDescriptionConstPtr> &task3_parametersConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<task3_parametersConfig::AbstractGroupDescriptionConstPtr> &task3_parametersConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const task3_parametersConfigStatics *task3_parametersConfig::__get_statics__()
  {
    const static task3_parametersConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = task3_parametersConfigStatics::get_instance();
    
    return statics;
  }


}

#endif // __TASK3_PARAMETERSRECONFIGURATOR_H__
