//
// Created by will on 5/24/17.
//

#ifndef PROJECT_MODEL_BASED_DETECTOR_H
#define PROJECT_MODEL_BASED_DETECTOR_H

#include <pcl/point_types.h>
#include <pcl/point_cloud.h>

/**
 * This is a class to detect the presence and pose of an object based on a point cloud model (such as one generated by
 * running `pcl_mesh_sampling model_in.obj model_out.pcd -write-normals`. Expects input models to have normals. See
 * rover_detection_2_node in val_task2 for an example of usage.
 *
 * Implements the approach described here (with improvements to work around some of PCL's many idiosyncrasies):
 * http://pointclouds.org/documentation/tutorials/alignment_prerejective.php#alignment-prerejective
 */

class model_based_detector {
public:
    // point / point cloud typedefs for convenience
    typedef pcl::PointNormal                ModelPoint; // for clouds representing the model
    typedef pcl::PointCloud<ModelPoint>     ModelCloud;
    typedef pcl::PointXYZ                   InputPoint; // for clouds representing what the robot sees
    typedef pcl::PointCloud<InputPoint>     InputCloud;

private:
    // Detection model and parameters
    ModelCloud::ConstPtr model_;
    float downsample_resolution_ = 0.01;
    bool use_crop_box_ = false;
    Eigen::Vector4f crop_box_min_;
    Eigen::Vector4f crop_box_max_;

    // publishers and subscribers
    ros::Subscriber cloud_sub_;

public:
    model_based_detector(ros::NodeHandle nh, const std::string &cloud_topic, ModelCloud::ConstPtr model);
    model_based_detector(ros::NodeHandle nh, const std::string &cloud_topic, const std::string &model_path)
            : model_based_detector(nh, cloud_topic, readModelFromPath(model_path)) {}

    static ModelCloud::ConstPtr readModelFromPath(const std::string &path);

    void setResolution(const float res);

    void setCrop();
    void setNoCrop();
    void setCrop(const Eigen::Vector4f &max, const Eigen::Vector4f &min);

    void cloudCallback(const InputCloud::ConstPtr &cloud);


private:
    // Util functions
    const InputCloud::Ptr &getConditionedInput(const InputCloud::ConstPtr input);
    const ModelCloud::Ptr &getConditionedModel();
};

#endif //PROJECT_MODEL_BASED_DETECTOR_H
